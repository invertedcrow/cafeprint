stages:
  - openmergereqf
  - openmergereqh
  - build
  - version

variables:
  DOCKER_TLS_CERTDIR: ""

Open Merge Request from Feature to Development:
  image: tmaier/gitlab-auto-merge-request:1
  before_script: [] # We do not need any setup work, let's remove the global one (if any)
  variables:
    GIT_STRATEGY: none # We do not need a clone of the GIT repository to create a Merge Request
    GITLAB_PRIVATE_TOKEN: ${PRIVATE_TOKEN}
    PRIVATE_TOKEN: ${PRIVATE_TOKEN}
  stage: openmergereqf
  only:
    - /^feature-.*$/ # We have a very strict naming convention
  script:
    - merge-request.sh # The name of the script

Open Merge Request from Hotfix to Development:
  image: tmaier/gitlab-auto-merge-request:1
  before_script: [] # We do not need any setup work, let's remove the global one (if any)
  variables:
    GIT_STRATEGY: none # We do not need a clone of the GIT repository to create a Merge Request
    GITLAB_PRIVATE_TOKEN: ${PRIVATE_TOKEN}
    PRIVATE_TOKEN: ${PRIVATE_TOKEN}
  stage: openmergereqh
  only:
    - /^hotfix-.*$/ # We have a very strict naming convention
  script:
    - merge-request.sh # The name of the script

build-master:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    - master

version:
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^master$/
  stage: version
  image: docker:latest
  before_script:
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
  script:
    - echo -n "${CI_COMMIT_SHORT_SHA}" > hash
    - git add --all
    - git commit -m "GitLab update version"
    - git push "https://${GITLAB_USER_NAME}:${CI_GIT_TOKEN}@${CI_REPOSITORY_URL#*@}" "HEAD:master"
